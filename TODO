 - prism BIOS
    - set internal interrupts
    - main app writes indexes of storages in main mem, BIOS reads them
    - set correct modes to peripheral
    - find bootable media
    - start bootloader
    - initial CPU test
    - test timers/video/keyboard
 - peripheral
    - PPI (8255A)
    - keyboard (XT style)
    - video
    - DMA (intel 8237)
    - flopy
    - HDD
    - CMOS
 - later
    - keyboard (8042)

-------------------------------------------------------

HSBIOS
 - Simple implementation of PC BIOS
 - Completely in haskell
 - Will not use "real" peripherals

Functions
 - int 8 (Timer) - BIOS internal (ISR)
 - int 9 (Keyboard) - BIOS internal (ISR)
 - int 0x10 (Video)
   - ah 0 (Set video mode)
   - ah 1 (Set cursor shape)
   - ah 2 (Set cursor pos)
   - ah 3 (Get cursor pos)
   - ah 6 (Scroll up)
   - ah 7 (Scroll down)
   - ah 8 (Get char)
   - ah 9 (Write char + attr)
   - ah e (Write char)
   - ah f (Get video mode)
 - int 0x11 (Get equipment)
 - int 0x12 (Get memory size)
 - int 0x13 (Disk)
   - ah 0 (Reset disk)
   - ah 1 (Get status)
   - ah 2 (Read)
   - ah 3 (Write)
   - ah 4 (Verify)
   - ah 5 (Format track)
   - ah 8 (Get params)
   - ah c (Seek)
   - ah 10 (Check ready)
   - ah 15 (Get type)
   - ah 16 (Detect)
 - int 0x14 (Serial)
 - int 0x15 (System services)
 - int 0x16 (Keyboard) (DSR)
   - ah 0 (Get key)
     - Return 2 byte key in AX
        - AH contains Scan code
        - AL contains ASCII code
     - Remove key from buffer
     - When buffer is empty - suspend
   - ah 1 (Return keyboard status)
     - Return 2 byte key in AX
     - Key is not removed from buffer
     - If buffer is empty ZF=1
     - If buffer is not empty ZF=0
   - ah 2 (Return shift flag status)
     - AL contains flags
        - Bit 7 - Insert
        - Bit 6 - Caps Lock
        - Bit 5 - Num Lock
        - Bit 4 - Scroll Lock
        - Bit 3 - Alt pressed
        - Bit 2 - Ctrl pressed
        - Bit 1 - Left Shift pressed
        - Bit 0 - Right Shift pressed
   - ah 0x12 (Return extended shift flag status)
        - AL contains same flags as AH 2
        - AH contains flags
            - Bit 7 - SysReq pressed
            - Bit 6 - Caps Lock
            - Bit 5 - Num Lock
            - Bit 4 - Scroll Lock
            - Bit 3 - Right Alt
            - Bit 2 - Right Ctrl
            - Bit 1 - Left Alt
            - Bit 0 - Left Ctrl
 - int 0x17 (Printer)
 - int 0x19 (Reboot)
 - int 0x1a (Clock)
   - ah 0 (Read System Timer Time Counter)
     Ticks are 18.2 Hz
        - al - Timer overflow (0 when < 24h since boot)
        - CF (1 - error)
        - CX - High word ticks
        - DX - Low word ticks
   - ah 2 (Read Real Time Clock Time)
        - AL - Hours BCD
        - CF - 0 = clock operating
        - CH - Hours BCD
        - CL - Minutes BCD
        - DH - Seconds BCD
        - DL - Daylight saving time
   - ah 4 (Read Real Time Clock Date)
        - CF - 1 = update in progress
        - CH - Century in BCD (19 or 20)
        - CL - Year in BCD
        - DH - Month in BCD
        - DL - Day in BCD
 - int 0x1b (Break code)
 - int 0x1d (Video params)
 - int 0x1e (Disk params)

Communication types:
 - Peripheral -> CPU
    - Keyboard
        - Generates interrupts
        - Sends key make-break
        - Sends key code
    - Serial
    - Printer
 - CPU -> Peripheral
    - Video
        - Set/Get cursor
        - Set/Get video mode
        - Write/Get char
    - Disk
    - Serial
    - Printer
 - CPU -> CPU
    - Timer
    - Clock
    - Reboot
 - Static return
    - Memory size
    - Equipment
    - Video params
    - Disk params

Keyboard implementation
 - Set interrupt for keyboard IRQs
 - Make thread-safe keyboard state
 - Share state between CPU and peripheral thread
 - Upon receiving interrupt read keyboard shared state
 - Generate internal interrupts

Keyboard
 - Shift/Toggle keys: Shift, Alt, Ctrl, Caps Lock, Num Lock, Scroll Lock
 - Each "key" consists of two bytes: main and aux
 - Some keys have special function:
    - Ctrl-Alt-Del - System reset
    - Ctrl-Break - Break
    - Ctrl-NumLock - Pause
    - Shift-PrintScreen - Print screen
    - SysReq - System request

Video implementation
 - Spawn peripheral thread
 - Create shared video state
 - Each 30ms draw video frame
 - Check shared state before drawing
 - Shared state will have info about video updates (if video memory was updated since last screen draw)
 - CPU will update shared state when it touches video memory

Disk implementation
 - Read/Write file in CPU context
 - Hardcode default disk parameters
 - Use raw disk image of a default size

Timer implementation
 - Use CPU scheduler or PIT to create timer
 - Call BIOS function for each timer event
 - From BIOS call corresponding user interrupt

Clock implementation
 - Use base lib to read and convert current date
 - Ticks could be read from run-time

Static parameters
 - Will be hardcoded or defined via arguments

HW ports
 - Need PIC/PIT
 - Video cursor
 - Video resolution
 - Video scancode/refresh

TODO:
 - Implement BIOS structs
 - Create keyboard infra
 - Implement basic keyboard functions
    - Internal interrupt
    - Char conversion
    - 0, 1, 2, 12
 - Implement BIOS tests (part of test-asm)
    - Send keyboard interrupts + update shared state
 - Implement BIOS timer
 - Static parameters
    - Hardcode default
    - Create unit tests
 - Implement basic video functions
    - No thread sync is needed initially
    - It is acceptable if CPU writes when peripheral thread draws image
 - Implement simple application which uses BIOS
    - Key echo (read key, write key)

-------------------------------------------------------

BIOS

data Key = Key {
}

data BiosKeyboard = BiosKeyboard {
    remoteKeyboardState :: SharedKeyboardState,
    keyList :: [Key],
}

data BiosState = BiosState {
    biosKeyboard :: BiosKeyboard,
}

class DirectCommandPeripheral m where
    directCommand :: DirectCommand -> m ()

-------------------------------------------------------

PIC

 - IRR - input interrupts which are active
 - ISR - serviced interrupts
 - IMR - masked interrupts

 ICW1
  - LTIM (Level trigger mode)
    - 1 - Level
    - 0 - Edge
  - ADI (Call address interval)
    - 1 - 4
    - 0 - 8
  - SNGL
    - 1 - single
    - 0 - cascade
  - IC4
    - 1 - ICW4 needed
    - 0 - no ICW4 needed

 ICW2 (interrupt address)
  - bits 3-7 -> T3-T7

 ICW3 (cascade config)
  - S0-S7 - 1 has slave (master)
  - ID0-ID2 - id (slave)

 ICW4
  - SFNM (speciall fully nested mode)
    - 1 - yes
  - BUF
    - 1 - yes
  - M/S (works only in BUF mode)
    - 1 - master
    - 0 - slave
  - AEOI (automatic end of interrupt)
    - 1 - yes
  - uPM (microprocessor mode)
    - 0 - 80/85
    - 1 - 8086

 OCW1 (configure IMR)
  - 1 - mask (disable interrupt)
  - 0 - unmask (enable interrupt)

 OCW2
  - R (rotate)
    - 1 - yes
  - SL (specific)
    - 1 - yes
  - EOI (end of interrupt)
    - 1 - EOI
    - 0 - AEOI
  - L (interrupt level)
    - 3 bits

 OCW3
  - RIS
  - RR
    - 11 - Read IS
    - 01 - Read IR
  - P (poll)
    - 1 - poll command
  - SMM
  - ESMM
    - 11 - set special mask
    - 01 - reset special mask

-------------------------------------------------------

actions
 - config
    - can trigger interrupt and scheduling actions
 - raise/lower interrupt
    - out pin status will be used to set PIC
 - schedule update
    - may trigger rescheduling
    - may trigger interrupt
 - write status/counter
    - may cause interrupts or scheduling
 - read status/counter
    - read does not cause actions
 - set gate
    - can trigger interrupt and scheduling

 - all actions require actual CPU cycles
 - CPU cycles always increment
 - CPU cycles never goes backwards

read-write
 - totally independent state and buffers for read (OL) and write (CR)
 - for multi bytes write it must be accumulated before set to CE

read commands
 - direct read from latches, latches follow CE
    - counter will be read directly according RW mode configured with controll command
    - second latch may go increment while first one is read
 - latch counter and then read latches
 - read back command

latch (OL) is held until
 - it is read
 - counter is reprogrammed
    - writing new counter values does not cause clear of OL
    - only control word applied to counter causes it
 latch is per-counter
 second latch command is ignored, first is held until it is read

read-back generates special output
 - 
 can latch multiple counters, same action as latch command
 when status and count latched, then first read value is status

counter components:
 - preset (Uint16), value written to counter (CR)
 - CR state
    - null count
 - CPU cycles when counting started
    - will be used when counter is read to emulate pulses
 - latch for status
 - read state
    - read latch (OL)
 - write state
    - write latch (CR)
 - mode (0-5)
 - count format (BIN/BCD)
 - out pin (1/0)

0x40 - timer 0
0x41 - timer 1
0x42 - timer 2
0x43 - code word
    - only write
    - no read
0x61 - speaker (out pin?)

-------------------------------------------------------
