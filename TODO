 - prism BIOS
    - set internal interrupts
    - main app writes indexes of storages in main mem, BIOS reads them
    - set correct modes to peripheral
    - find bootable media
    - start bootloader
    - initial CPU test
    - test timers/video/keyboard
 - peripheral
    - PIT
    - CMOS
    - keyboard
    - video
    - flopy
    - HDD

-------------------------------------------------------

PIC

 - IRR - input interrupts which are active
 - ISR - serviced interrupts
 - IMR - masked interrupts

 ICW1
  - LTIM (Level trigger mode)
    - 1 - Level
    - 0 - Edge
  - ADI (Call address interval)
    - 1 - 4
    - 0 - 8
  - SNGL
    - 1 - single
    - 0 - cascade
  - IC4
    - 1 - ICW4 needed
    - 0 - no ICW4 needed

 ICW2 (interrupt address)
  - bits 3-7 -> T3-T7

 ICW3 (cascade config)
  - S0-S7 - 1 has slave (master)
  - ID0-ID2 - id (slave)

 ICW4
  - SFNM (speciall fully nested mode)
    - 1 - yes
  - BUF
    - 1 - yes
  - M/S (works only in BUF mode)
    - 1 - master
    - 0 - slave
  - AEOI (automatic end of interrupt)
    - 1 - yes
  - uPM (microprocessor mode)
    - 0 - 80/85
    - 1 - 8086

 OCW1 (configure IMR)
  - 1 - mask (disable interrupt)
  - 0 - unmask (enable interrupt)

 OCW2
  - R (rotate)
    - 1 - yes
  - SL (specific)
    - 1 - yes
  - EOI (end of interrupt)
    - 1 - EOI
    - 0 - AEOI
  - L (interrupt level)
    - 3 bits

 OCW3
  - RIS
  - RR
    - 11 - Read IS
    - 01 - Read IR
  - P (poll)
    - 1 - poll command
  - SMM
  - ESMM
    - 11 - set special mask
    - 01 - reset special mask

-------------------------------------------------------

read-write
 - totally independent state and buffers for read and write
 - for multi bytes write it must be accumulated before set to CR

latch is held until
 - it is read
 - counter is reprogrammed
 latch is per-counter
 second latch command is ignored, first is held until it is read

read-back generates special output
 - 
 can latch multiple counters, same action as latch command
 when status and count latched, then first read value is status

counter components:
 - preset (Uint16), value written to counter (CR)
 - CR state
    - null count
 - CPU cycles when counting started
    - will be used when counter is read to emulate pulses
 - latch for status
 - read state
    - read latch
 - write state
    - write latch
 - mode (0-5)
 - count format (BIN/BCD)
 - out pin (1/0)

operations:
 command :: PITCommand -> PIT -> PIT
 command CWCommand = ...
 command LatchCommand = ...
 command ReadBack = ...
 command RW = ...
 read :: PIT -> (PIT, val)
 write :: PIT -> val -> PIT

output:
 - val for read (Uint8)
 - event to raise/lower interrupt for all (Bool)
 - timeout time when it changes (Maybe Uint64)

0x40 - timer 0
0x41 - timer 1
0x42 - timer 2
0x43 - code word
    - only write
    - no read
0x61 - speaker (out pin?)

data RWMode = RLatch | RWLeast | RWMost | RWBoth
data PITMode = PITMode0 | PITMode1 ... | PITMode5
data SelectCounter = SelectCounter0 | ... | ReadBack
data CounterMode = BinCounter | BCDCounter

data ControlWord = ControlWord {
        ctrlLRWMode :: RWMode,
        ctrlPitMode :: PITMode,
        ctrlSC :: SelectCounter,
        ctrlCM :: CounterMode
    }

data PITCommand = CWCommand CounterNum ControlWord
                | LatchCommand Bool Bool (Bool, Bool, Bool)
                | ReadBack LatchStatus LatchCount CounterNum
                | ReadCommand

newtype PitMode = PitMode Uint8

MVar or IORef

data Latch = LatchLSB Uint8
           | LatchMSB Uint8
           | LatchBoth Uint8 Uint8

data WriteState = WriteLSB
                | WriteMSB
                | WriteBoth Uint8

data ReadState = ReadLSB | WriteMSB

data Counter = Counter {
        counterCR :: Uint16, -- preset
        counterNullCount :: Bool,
        counterLatchStatus :: Maybe Uint8, -- set when latch is requested
        counterLatchRead :: Maybe Latch,
        counterWrite :: Maybe WriteState,
        counterRead :: ReadState,
        counterMode :: Mode,
        counterFormat :: Format,
        counterOut :: Bool,
        ---
        counterCyclesCPU :: Uint64
}

data PitCounter = PitCounter {
        pitCW :: ControlWord,
        pitMode :: PitMode,
        pitCounter :: MVar Word64,
        pitTimeout :: Int, -- timeout in us
        pitScale :: Uint16, -- mapping between system time and counter
        pitPreset :: Uint16, -- value which is loaded into counter
        pitThreadId :: Maybe ThreadId
    }

data PIT = PIT {
        pitCounters :: [PitCounter]
    }

data PeripheralDevices = PeripheralDevices {
        peripheralPIT :: PIT,
    }

parseCW :: Uint8 -> PITCommand
parseCW v | (d7 && d6) == 1 && d0 == 0 = ReadBack
parseCW v | (d5 && d4) == 0 = LatchCommand (counter v)

writeCW :: PIT -> Uint8 -> PIT
writeCW pit val =
    where
        cw = parseCW val



-------------------------------------------------------
