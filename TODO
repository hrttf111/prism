 - implement port infra
 - memory mapped infra
 - prism BIOS
    - set internal interrupts
    - main app writes indexes of medias in main mem, BIOS reads them
    - set correct modes to peripheral
    - find bootable media
    - start bootloader
    - initial CPU test
    - test timers/video/keyboard
 - peripheral
    - video
    - keyboard
    - flopy
    - HDD
    - PIC
    - PIT

-------------------------------------------------------
Ports

readPort16 :: MonadIO m => PortHandlers -> Uint16 -> m Uint16
readPort16 handlers port = 
    func <- handlers ! port
    func port

-------------------------------------------------------

data MemMapPage = MemMapPage {
        pageStart :: Offset,
        pageSize :: Int,
        pageMapped :: Bool,
        pageMappedBytes :: Array Bool
    }

type MappedHandler = Ctx -> Offset -> m ()

data Mapped = Mapped {
    mappedPages :: Array MemMapPage,
    mappedHandler :: MappedHandler
}

isMapped :: Ctx -> Offset -> Bool
isMapped ctx offset = 
    if pageMapped mappedPage then
        ! (pageMappedBytes mappedPage) (offset % pageSizeG)
        else False
    where
        mappedInfra = ctxMapped ctx
        mappedPage = ! (mappedPages mappedInfra) (div offset pageSizeG)

readMem16 :: Ctx -> Mem -> m Uint16
readMem16 ctx mem = do
    offset <- getMemOffset ctx mem
    if isMapped offset then mappedHandler offset
        else peekByteOff
